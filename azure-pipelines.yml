# azure-pipelines.yml
trigger: none

variables:
  serviceConnection: 'terraform-access'     # EXACT service connection name
  workingDir: '$(Build.SourcesDirectory)/terraform'
  GO_VERSION: '1.24.5'                      # Go for tfsec install
  TFSEC_VERSION: 'v0.63.1'                  # pin as per docs (or 'latest')
  TFLINT_VERSION: 'v0.50.3'                 # choose a stable release

stages:
# --------------------------------
# Stage 1: TF plan (preview)
# --------------------------------
- stage: tf
  displayName: 'TF plan (preview)'
  jobs:
  - job: plan
    pool:
      name: 'ubuntuvm'                      # your self-hosted agent pool
    steps:
    - checkout: self
      clean: true

    # Login and run everything in ONE step so OIDC auth is active
    - task: AzureCLI@2
      displayName: 'Login with OIDC + install Go/tfsec + tflint + plan'
      inputs:
        azureSubscription: '$(serviceConnection)'   # <-- indispensable part kept
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "== Using service connection context =="
          az account show

          # user-writable bin (no sudo) and PATH
          BIN_DIR="$(Agent.TempDirectory)/bin"
          mkdir -p "$BIN_DIR"
          export PATH="$BIN_DIR:$PATH"

          echo "== Install Go locally (no sudo) =="
          if ! command -v go >/dev/null 2>&1; then
            GO_TGZ="go$(GO_VERSION).linux-amd64.tar.gz"
            curl -sSL "https://go.dev/dl/${GO_TGZ}" -o "${GO_TGZ}"
            tar -C "$(Agent.TempDirectory)" -xzf "${GO_TGZ}"
            export GOROOT="$(Agent.TempDirectory)/go"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export GOBIN="$BIN_DIR"
            mkdir -p "$GOPATH"
            export PATH="$GOROOT/bin:$GOBIN:$GOPATH/bin:$PATH"
          else
            export GOBIN="$BIN_DIR"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export PATH="$GOBIN:$GOPATH/bin:$PATH"
          fi
          go version

          echo "== Install tfsec via Go =="
          if ! command -v tfsec >/dev/null 2>&1; then
            go install "github.com/aquasecurity/tfsec/cmd/tfsec@${TFSEC_VERSION}"
          fi
          tfsec --version

          echo "== Install tflint to user bin (no sudo) =="
          if ! command -v tflint >/dev/null 2>&1; then
            TMP="$(mktemp -d)"
            curl -sSL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o "${TMP}/tflint.zip"
            unzip -q "${TMP}/tflint.zip" -d "${TMP}"
            install -m 0755 "${TMP}/tflint" "${BIN_DIR}/tflint"
            tflint --version
          fi

          echo "== Linting (non-fatal for tfsec) =="
          tflint --init
          tflint --recursive
          tfsec "$(Build.SourcesDirectory)/terraform" || true

          echo "== Terraform plan (preview) =="
          terraform -version
          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" validate
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -input=false -out="tfplan.out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.out
      artifact: tfplan-preview
      displayName: 'Publish TF plan (preview)'

# --------------------------------
# Stage 2: Deploy (matrix)
# --------------------------------
- stage: deploy
  displayName: 'Deploy (matrix)'
  dependsOn: tf
  jobs:
  - job: deploy
    pool:
      name: 'ubuntuvm'
    strategy:
      matrix:
        dev:
          environment: dev
        test:
          environment: test
        prod:
          environment: prod
    steps:
    - checkout: self
      clean: true

    - task: AzureCLI@2
      displayName: 'Login with OIDC + tools + plan (env)'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Environment: $(environment)"
          az account show

          # user-writable bin and PATH
          BIN_DIR="$(Agent.TempDirectory)/bin"
          mkdir -p "$BIN_DIR"
          export PATH="$BIN_DIR:$PATH"

          # Go (for tfsec)
          if ! command -v go >/dev/null 2>&1; then
            GO_TGZ="go$(GO_VERSION).linux-amd64.tar.gz"
            curl -sSL "https://go.dev/dl/${GO_TGZ}" -o "${GO_TGZ}"
            tar -C "$(Agent.TempDirectory)" -xzf "${GO_TGZ}"
            export GOROOT="$(Agent.TempDirectory)/go"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export GOBIN="$BIN_DIR"
            mkdir -p "$GOPATH"
            export PATH="$GOROOT/bin:$GOBIN:$GOPATH/bin:$PATH"
          else
            export GOBIN="$BIN_DIR"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export PATH="$GOBIN:$GOPATH/bin:$PATH"
          fi

          # tfsec via go
          if ! command -v tfsec >/dev/null 2>&1; then
            go install "github.com/aquasecurity/tfsec/cmd/tfsec@${TFSEC_VERSION}"
          fi

          # tflint to BIN_DIR
          if ! command -v tflint >/dev/null 2>&1; then
            TMP="$(mktemp -d)"
            curl -sSL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o "${TMP}/tflint.zip"
            unzip -q "${TMP}/tflint.zip" -d "${TMP}"
            install -m 0755 "${TMP}/tflint" "${BIN_DIR}/tflint"
          fi

          # Lint & Plan
          tflint --init
          tflint --recursive
          tfsec "$(Build.SourcesDirectory)/terraform" || true

          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" workspace select -or-create "$(environment)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -input=false \
            -var="workflow=$(environment)" \
            -out="tfplan.$(environment).out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.$(environment).out
      artifact: tfplan-$(environment)

    # apply on master only (optional)
    - task: AzureCLI@2
      displayName: 'Terraform apply (master only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir="$(Build.SourcesDirectory)/terraform" apply -auto-approve "tfplan.$(environment).out"
