# azure-pipelines.yml
trigger: none

variables:
  serviceConnection: 'terraform-access'    # EXACT service connection name
  workingDir: '$(Build.SourcesDirectory)/terraform'
  GO_VERSION: '1.24.5'                     # pin Go; change as you like (1.22.x+)

stages:
- stage: tf
  jobs:
  - job: plan
    pool:
      name: 'ubuntuvm'
    steps:
    - checkout: self
      clean: true

    # Login and run everything in ONE step so OIDC auth is active
    - task: AzureCLI@2
      displayName: 'Login with OIDC + install Go + tfsec (via go) + tflint + plan'
      inputs:
        azureSubscription: '$(serviceConnection)'   # <-- indispensable part preserved
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Environment: ${environment:-dev}"

          # User-writable bin; avoid sudo
          BIN_DIR="$(Agent.TempDirectory)/bin"
          mkdir -p "$BIN_DIR"
          export PATH="$BIN_DIR:$PATH"

          # --- Install Go locally (no sudo) ---
          if ! command -v go >/dev/null 2>&1; then
            GO_TGZ="go$(GO_VERSION).linux-amd64.tar.gz"
            curl -sSL "https://go.dev/dl/${GO_TGZ}" -o "${GO_TGZ}"
            tar -C "$(Agent.TempDirectory)" -xzf "${GO_TGZ}"
            export GOROOT="$(Agent.TempDirectory)/go"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export GOBIN="$BIN_DIR"
            mkdir -p "$GOPATH"
            export PATH="$GOROOT/bin:$GOBIN:$GOPATH/bin:$PATH"
          else
            # Ensure go-installed binaries land in our BIN_DIR
            export GOBIN="$BIN_DIR"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export PATH="$GOBIN:$GOPATH/bin:$PATH"
          fi
          go version

          # --- Install tfsec via Go (per docs) ---
          if ! command -v tfsec >/dev/null 2>&1; then
            # Pin a version if you want, e.g. @v0.63.1 ; otherwise @latest
            go install github.com/aquasecurity/tfsec/cmd/tfsec@latest
          fi
          tfsec --version

          # --- Install TFLint without sudo ---
          if ! command -v tflint >/dev/null 2>&1; then
            curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh \
              | bash -s -- -b "$BIN_DIR"
          fi
          tflint --init
          tflint --recursive

          # --- Terraform plan ---
          terraform -version
          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" validate
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -input=false -out="tfplan.out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.out
      artifact: tfplan
      displayName: 'Publish TF plan'