# azure-pipelines.yml
trigger: none

variables:
  serviceConnection: 'terraform-access'     # EXACT service connection name
  workingDir: '$(Build.SourcesDirectory)/terraform'
  doDestroy: 'false'                        # set to 'true' to enable destroy step

# -------------------------
# Stage 1: tf (plan preview)
# -------------------------
stages:
- stage: tf
  displayName: 'TF plan (preview)'
  jobs:
  - job: plan
    pool:
      name: 'ubuntuvm'                      # your self-hosted agent pool
    steps:
    - checkout: self
      clean: true

    # (inside your existing stage)
    - task: AzureCLI@2
      displayName: 'Login with OIDC + tools + lint'
      inputs:
        azureSubscription: '$(serviceConnection)'   # <- keep this
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Environment: $(environment)"

          # Create a user-writable bin and add to PATH
          BIN_DIR="$(Agent.TempDirectory)/bin"
          mkdir -p "$BIN_DIR"
          export PATH="$BIN_DIR:$PATH"

          az account show
          terraform -version

          # --- install TFLint (no sudo) ---
          if ! command -v tflint >/dev/null 2>&1; then
            curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh \
          | bash -s -- -b "$BIN_DIR"
          fi
          tflint --init
          tflint --recursive

          # --- install tfsec (no sudo) ---
          if ! command -v tfsec >/dev/null 2>&1; then
            curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh \
          | bash -s -- -b "$BIN_DIR"
          fi
          # Donâ€™t fail the pipeline on tfsec findings by default
          tfsec "$(Build.SourcesDirectory)/terraform" || true

          # Terraform
          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" workspace select -or-create "$(environment)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -input=false \
            -var="workflow=$(environment)" \
            -out="tfplan.$(environment).out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.$(environment).out
      artifact: tfplan-$(environment)

    # Apply only on master branch (adjust as needed)
    - task: AzureCLI@2
      displayName: 'Terraform apply (master only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir=$(Build.SourcesDirectory)/terraform apply -auto-approve "tfplan.$(environment).out"

    # Optional destroy (guarded by variable)
    - task: AzureCLI@2
      displayName: 'Terraform destroy (if enabled)'
      condition: and(succeeded(), eq(variables['doDestroy'], 'true'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir=$(Build.SourcesDirectory)/terraform destroy -auto-approve -var="workflow=$(environment)"
