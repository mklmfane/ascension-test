parameters:
- name: orgUrl
  type: string
  default: "https://dev.azure.com/mirceaconstantin434/"
- name: project
  type: string
  default: "test-ascendion"
- name: scInput                  # DevOps service connection NAME or ID (GUID)
  type: string
  default: ""

stages:
- stage: GetAppClientId
  displayName: "Inspect Service Connection"
  variables:
    ORG_URL: ${{ parameters.orgUrl }}
    PROJECT: ${{ parameters.project }}
    SC_NAME: ${{ parameters.scInput }}

  jobs:
  - job: FetchValues
    displayName: "Fetch SC + App values"
    pool: { name: 'ubuntuvm' }

    steps:
    # 0) Force ADO to authorize this service connection for the pipeline
    - task: AzureCLI@2
      displayName: "Authorize '$(SC_NAME)' (no-op)"
      inputs:
        azureSubscription: '$(SC_NAME)'     # e.g., terraform-access OR the GUID
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          az account show >/dev/null
          echo "Authorized $(SC_NAME)."

    # 1) Fetch details using System.AccessToken
    - bash: |
        set -euo pipefail
        if [ -z "${AZURE_DEVOPS_EXT_PAT:-}" ]; then
          echo "##vso[task.logissue type=error]System.AccessToken is empty. Enable 'Allow scripts to access the OAuth token'."
          exit 1
        fi

        ORG_URL="$(echo '$(ORG_URL)')"
        PROJECT="$(echo '$(PROJECT)')"
        SC_NAME="$(echo '$(SC_NAME)')"

        az extension add --name azure-devops >/dev/null 2>&1 || true
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y && sudo apt-get install -y jq
        fi

        echo "Looking for service connection '${SC_NAME}' in project '${PROJECT}'..."
        SC_LIST_JSON=$(az devops service-endpoint list --organization "$ORG_URL" --project "$PROJECT" -o json 2>/dev/null || echo "[]")

        echo "Available service connections (name → id):"
        echo "$SC_LIST_JSON" | jq -r '.[] | "\(.name) → \(.id)"' | sed 's/^/  - /' || true

        # Try exact, case-insensitive, or treat input as the endpoint ID (GUID)
        SC_JSON=$(echo "$SC_LIST_JSON" | jq --arg n "$SC_NAME" -r '[.[] | select(.name == $n)] | .[0] // empty')
        if [[ -z "$SC_JSON" ]]; then
          SC_JSON=$(echo "$SC_LIST_JSON" | jq --arg n "$SC_NAME" -r \
            '[.[] | select((.name|ascii_downcase) == ($n|ascii_downcase))] | .[0] // empty')
        fi
        if [[ -z "$SC_JSON" && "$SC_NAME" =~ ^[0-9a-fA-F-]{36}$ ]]; then
          echo "No name match; trying endpoint ID…"
          SC_JSON=$(az devops service-endpoint show --organization "$ORG_URL" --project "$PROJECT" --id "$SC_NAME" -o json 2>/dev/null || true)
        fi

        if [[ -z "$SC_JSON" || "$SC_JSON" == "null" ]]; then
          echo "##vso[task.logissue type=error]Service connection '$SC_NAME' not found or not authorized."
          exit 2
        fi

        SC_ID=$(echo "$SC_JSON" | jq -r '.id')
        SC_TYPE=$(echo "$SC_JSON" | jq -r '.type // empty')
        SC_URL=$(echo "$SC_JSON" | jq -r '.url // empty')
        AUTH_SCHEME=$(echo "$SC_JSON" | jq -r '.authorization.scheme // "N/A"')
        SUBSCRIPTION_ID=$(echo "$SC_JSON" | jq -r '.data.subscriptionId // "N/A"')
        APP_CLIENT_ID=$(echo "$SC_JSON" | jq -r '.authorization.parameters.serviceprincipalid // empty')
        TENANT_ID=$(echo "$SC_JSON" | jq -r '.authorization.parameters.tenantid // .data.scopeTenantId // empty')

        echo "ID:                 $SC_ID"
        echo "Type:               ${SC_TYPE:-<empty>}"
        echo "URL:                ${SC_URL:-<empty>}"
        echo "Auth Scheme:        $AUTH_SCHEME"
        echo "Subscription ID:    $SUBSCRIPTION_ID"
        echo "Application (client) ID: ${APP_CLIENT_ID:-<empty>}"
        echo "Tenant ID:          ${TENANT_ID:-<empty>}"

        # Output for later stages
        echo "##vso[task.setvariable variable=serviceConnectionId;isOutput=true]$SC_ID"
        echo "##vso[task.setvariable variable=serviceConnectionType;isOutput=true]$SC_TYPE"
        echo "##vso[task.setvariable variable=serviceConnectionUrl;isOutput=true]$SC_URL"
        echo "##vso[task.setvariable variable=authScheme;isOutput=true]$AUTH_SCHEME"
        echo "##vso[task.setvariable variable=subscriptionId;isOutput=true]$SUBSCRIPTION_ID"
        echo "##vso[task.setvariable variable=appClientId;isOutput=true]$APP_CLIENT_ID"
        echo "##vso[task.setvariable variable=tenantId;isOutput=true]$TENANT_ID"
      name: fetch
      displayName: "Fetch service connection + app registration details"
      env:
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
