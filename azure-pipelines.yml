# azure-pipelines.yml
trigger: none

variables:
  serviceConnection: 'terraform-access'     # EXACT service connection name
  workingDir: '$(Build.SourcesDirectory)/terraform'
  GO_VERSION: '1.24.5'
  TFSEC_VERSION: 'v1.28.14'                 # or 'latest'
  TFLINT_VERSION: 'v0.59.1'
  doDestroy: 'false'                        # flip to 'true' to enable final destroy
  TF_WORKFLOW: 'dev'                    # <-- used in the TF preview stage

stages:
# -------- TF plan (preview) --------
- stage: tf
  displayName: 'TF plan (preview)'
  jobs:
  - job: plan
    pool: { name: 'ubuntuvm' }
    steps:
    - checkout: self
      clean: true

    # (kept) Login + lint + plan in one step
    - task: AzureCLI@2
      displayName: 'Login with OIDC + install Go/tfsec + tflint + plan'
      inputs:
        azureSubscription: '$(serviceConnection)'   # <- indispensable
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az account show

          BIN_DIR="$(Agent.TempDirectory)/bin"; mkdir -p "$BIN_DIR"; export PATH="$BIN_DIR:$PATH"

          # Go (no sudo)
          if ! command -v go >/dev/null; then
            GO_TGZ="go$(GO_VERSION).linux-amd64.tar.gz"
            curl -sSL "https://go.dev/dl/${GO_TGZ}" -o "${GO_TGZ}"
            tar -C "$(Agent.TempDirectory)" -xzf "${GO_TGZ}"
            export GOROOT="$(Agent.TempDirectory)/go"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export GOBIN="$BIN_DIR"
            mkdir -p "$GOPATH"
            export PATH="$GOROOT/bin:$GOBIN:$GOPATH/bin:$PATH"
          else
            export GOBIN="$BIN_DIR"; export GOPATH="$(Agent.TempDirectory)/gopath"; export PATH="$GOBIN:$GOPATH/bin:$PATH"
          fi
          go version

          # tfsec via go
          if ! command -v tfsec >/dev/null; then
            go install "github.com/aquasecurity/tfsec/cmd/tfsec@${TFSEC_VERSION}"
          fi
          tfsec --version

          # tflint (no sudo)
          if ! command -v tflint >/dev/null; then
            TMP="$(mktemp -d)"
            curl -sSL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o "${TMP}/tflint.zip"
            unzip -q "${TMP}/tflint.zip" -d "${TMP}"
            install -m 0755 "${TMP}/tflint" "${BIN_DIR}/tflint"
          fi

          # lint + plan (preview workspace/var)
          tflint --init
          tflint --recursive
          tfsec "$(Build.SourcesDirectory)/terraform" || true

          terraform -version
          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" validate
          terraform -chdir="$(Build.SourcesDirectory)/terraform" workspace select -or-create "$(TF_WORKFLOW)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -input=false \
            -var="workflow=$(TF_WORKFLOW)" \
            -out="tfplan.out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.out
      artifact: tfplan-preview

# -------- Deploy (matrix) --------
- stage: deploy
  displayName: 'Deploy (matrix)'
  dependsOn: tf
  jobs:
  - job: deploy
    pool: { name: 'ubuntuvm' }
    strategy:
      matrix:
        dev:  { environment: dev }
        test: { environment: test }
        prod: { environment: prod }
    steps:
    - checkout: self
      clean: true

    - task: AzureCLI@2
      displayName: 'Login with OIDC + tools + plan (env)'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Environment: $(environment)"
          az account show

          BIN_DIR="$(Agent.TempDirectory)/bin"; mkdir -p "$BIN_DIR"; export PATH="$BIN_DIR:$PATH"

          # Go + tfsec
          if ! command -v go >/dev/null; then
            GO_TGZ="go$(GO_VERSION).linux-amd64.tar.gz"
            curl -sSL "https://go.dev/dl/${GO_TGZ}" -o "${GO_TGZ}"
            tar -C "$(Agent.TempDirectory)" -xzf "${GO_TGZ}"
            export GOROOT="$(Agent.TempDirectory)/go"
            export GOPATH="$(Agent.TempDirectory)/gopath"
            export GOBIN="$BIN_DIR"
            mkdir -p "$GOPATH"
            export PATH="$GOROOT/bin:$GOBIN:$GOPATH/bin:$PATH"
          else
            export GOBIN="$BIN_DIR"; export GOPATH="$(Agent.TempDirectory)/gopath"; export PATH="$GOBIN:$GOPATH/bin:$PATH"
          fi
          if ! command -v tfsec >/dev/null; then
            go install "github.com/aquasecurity/tfsec/cmd/tfsec@${TFSEC_VERSION}"
          fi

          # tflint
          if ! command -v tflint >/dev/null; then
            TMP="$(mktemp -d)"
            curl -sSL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o "${TMP}/tflint.zip"
            unzip -q "${TMP}/tflint.zip" -d "${TMP}"
            install -m 0755 "${TMP}/tflint" "${BIN_DIR}/tflint"
          fi

          # lint + plan per env
          tflint --init
          tflint --recursive
          tfsec "$(Build.SourcesDirectory)/terraform" || true

          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" workspace select -or-create "$(environment)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" plan -no-color -input=false \
            -var="workflow=$(environment)" \
            -out="tfplan.$(environment).out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.$(environment).out
      artifact: tfplan-$(environment)

    # Apply on main only
    - task: AzureCLI@2
      displayName: 'Terraform apply (main only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir="$(Build.SourcesDirectory)/terraform" apply -auto-approve -no-color "tfplan.$(environment).out"

    # ---------- FINAL STEP: DESTROY (guarded) ----------
    - task: AzureCLI@2
      displayName: 'Terraform destroy (guarded by variable)'
      condition: and(succeeded(), eq(variables['doDestroy'], 'true'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Destroying environment: $(environment)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" init -input=false
          terraform -chdir="$(Build.SourcesDirectory)/terraform" workspace select -or-create "$(environment)"
          terraform -chdir="$(Build.SourcesDirectory)/terraform" destroy -auto-approve -var="workflow=$(environment)"
