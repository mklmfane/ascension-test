# azure-pipelines.yml
trigger: none

variables:
  serviceConnection: 'terraform-access'     # EXACT service connection name
  workingDir: '$(Build.SourcesDirectory)/terraform'
  doDestroy: 'false'                        # set to 'true' to enable destroy step

# -------------------------
# Stage 1: tf (plan preview)
# -------------------------
stages:
- stage: tf
  displayName: 'TF plan (preview)'
  jobs:
  - job: plan
    pool:
      name: 'ubuntuvm'                      # your self-hosted agent pool
    steps:
    - checkout: self
      clean: true

    # Login and run terraform in the same step  <<-- (kept as requested)
    - task: AzureCLI@2
      displayName: 'Login with OIDC and terraform plan'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          # Tools (install if missing)
          if ! command -v terraform >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gnupg curl software-properties-common
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update -y && sudo apt-get install -y terraform
          fi

          terraform -version
          terraform -chdir=$(Build.SourcesDirectory)/terraform init -input=false
          terraform -chdir=$(Build.SourcesDirectory)/terraform validate
          terraform -chdir=$(Build.SourcesDirectory)/terraform plan -input=false -out=tfplan.out

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.out
      artifact: tfplan-preview


# -----------------------------------
# Stage 2: provision terraform resource (matrix dev/test/prod)
# -----------------------------------
- stage: deploy
  displayName: 'Deploy (matrix)'
  dependsOn:
  - tf
  jobs:
  - job: deploy
    pool:
      name: 'ubuntuvm'
    strategy:
      matrix:
        dev:
          environment: dev
        test:
          environment: test
        prod:
          environment: prod
    steps:
    - checkout: self
      clean: true

    # Login and run everything inside AzureCLI (so OIDC auth is active)
    - task: AzureCLI@2
      displayName: 'Login with OIDC + tools + lint'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Environment: $(environment)"

          # Install tools if missing
          if ! command -v terraform >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gnupg curl software-properties-common
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update -y && sudo apt-get install -y terraform
          fi
          if ! command -v tflint >/dev/null 2>&1; then
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            sudo mv ./bin/tflint /usr/local/bin/tflint
          fi
          if ! command -v tfsec >/dev/null 2>&1; then
            curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          fi

          # Lint & security scan
          tflint --init
          tflint --recursive
          tfsec $(Build.SourcesDirectory)/terraform || true   # don't fail pipeline on tfsec by default

          # Terraform init & workspace
          terraform -chdir=$(Build.SourcesDirectory)/terraform init -input=false
          terraform -chdir=$(Build.SourcesDirectory)/terraform workspace select -or-create $(environment)

          # Plan
          terraform -chdir=$(Build.SourcesDirectory)/terraform plan -input=false \
            -var="workflow=$(environment)" \
            -out="tfplan.$(environment).out"

    - publish: $(Build.SourcesDirectory)/terraform/tfplan.$(environment).out
      artifact: tfplan-$(environment)

    # Apply only on master branch (adjust as needed)
    - task: AzureCLI@2
      displayName: 'Terraform apply (master only)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir=$(Build.SourcesDirectory)/terraform apply -auto-approve "tfplan.$(environment).out"

    # Optional destroy (guarded by variable)
    - task: AzureCLI@2
      displayName: 'Terraform destroy (if enabled)'
      condition: and(succeeded(), eq(variables['doDestroy'], 'true'))
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          terraform -chdir=$(Build.SourcesDirectory)/terraform destroy -auto-approve -var="workflow=$(environment)"
