# templates/get-app-client-id.yaml
parameters:
- name: orgUrl
  type: string
  default: "https://dev.azure.com/mirceaconstantin434/"
- name: project
  type: string
  default: "test-ascendion"
# Pass EITHER a DevOps Service Connection name/ID OR an AAD App OBJECT ID
- name: scInput
  type: string
  default: ""
# Optional ARM service connection for Graph fallback (resolve AAD appId)
- name: serviceConnectionForLogin
  type: string
  default: ""

stages:
- stage: GetAppClientId
  displayName: "Inspect Service Connection or App Registration"
  variables:
    ORG_URL: ${{ parameters.orgUrl }}
    PROJECT: ${{ parameters.project }}
    SC_NAME: ${{ parameters.scInput }}

  jobs:
  - job: FetchValues
    displayName: "Fetch SC + App values"
    pool: { name: 'ubuntuvm' }

    steps:
    - bash: |
        set -euo pipefail

        # Ensure OAuth token available for az devops
        if [ -z "${AZURE_DEVOPS_EXT_PAT:-}" ]; then
          echo "##vso[task.logissue type=error]System.AccessToken is empty. Enable 'Allow scripts to access the OAuth token' in Pipeline settings."
          exit 1
        fi

        ORG_URL="$(echo '$(ORG_URL)')"
        PROJECT="$(echo '$(PROJECT)')"
        SC_NAME="$(echo '$(SC_NAME)')"

        az extension add --name azure-devops >/dev/null 2>&1 || true
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y
          sudo apt-get install -y jq
        fi

        echo "Looking for service connection using SC_NAME='${SC_NAME}' in project '${PROJECT}'..."

        SC_LIST_JSON=$(az devops service-endpoint list --organization "$ORG_URL" --project "$PROJECT" -o json 2>/dev/null || echo "[]")
        echo "Available service connections (name → id):"
        echo "$SC_LIST_JSON" | jq -r '.[] | "\(.name) → \(.id)"' | sed 's/^/  - /' || true

        # Try resolve as DevOps service connection (name / case-insensitive / GUID id)
        SC_JSON=$(echo "$SC_LIST_JSON" | jq --arg n "$SC_NAME" -r '[.[] | select(.name == $n)] | .[0] // empty')
        if [[ -z "$SC_JSON" ]]; then
          SC_JSON=$(echo "$SC_LIST_JSON" | jq --arg n "$SC_NAME" -r \
            '[.[] | select((.name|ascii_downcase) == ($n|ascii_downcase))] | .[0] // empty')
        fi
        if [[ -z "$SC_JSON" && "$SC_NAME" =~ ^[0-9a-fA-F-]{36}$ ]]; then
          echo "No name match; trying to resolve as service-endpoint ID..."
          SC_JSON=$(az devops service-endpoint show --organization "$ORG_URL" --project "$PROJECT" --id "$SC_NAME" -o json 2>/dev/null || true)
        fi

        # Extract (may be empty if SC_NAME is actually an AAD Object ID)
        SC_ID=$(echo "${SC_JSON:-}" | jq -r '.id // empty')
        SC_TYPE=$(echo "${SC_JSON:-}" | jq -r '.type // empty')
        SC_URL=$(echo "${SC_JSON:-}" | jq -r '.url // empty')
        AUTH_SCHEME=$(echo "${SC_JSON:-}" | jq -r '.authorization.scheme // "N/A"')
        SUBSCRIPTION_ID=$(echo "${SC_JSON:-}" | jq -r '.data.subscriptionId // "N/A"')
        APP_CLIENT_ID=$(echo "${SC_JSON:-}" | jq -r '.authorization.parameters.serviceprincipalid // empty')
        TENANT_ID=$(echo "${SC_JSON:-}" | jq -r '.authorization.parameters.tenantid // .data.scopeTenantId // empty')

        echo "ID:                 ${SC_ID:-<empty>}"
        echo "Type:               ${SC_TYPE:-<empty>}"
        echo "URL:                ${SC_URL:-<empty>}"
        echo "Auth Scheme:        ${AUTH_SCHEME:-<empty>}"
        echo "Subscription ID:    ${SUBSCRIPTION_ID:-<empty>}"
        echo "Application (client) ID: ${APP_CLIENT_ID:-<empty>}"
        echo "Tenant ID:          ${TENANT_ID:-<empty>}"

        # Outputs for downstream
        echo "##vso[task.setvariable variable=serviceConnectionId;isOutput=true]${SC_ID}"
        echo "##vso[task.setvariable variable=serviceConnectionType;isOutput=true]${SC_TYPE}"
        echo "##vso[task.setvariable variable=serviceConnectionUrl;isOutput=true]${SC_URL}"
        echo "##vso[task.setvariable variable=authScheme;isOutput=true]${AUTH_SCHEME}"
        echo "##vso[task.setvariable variable=subscriptionId;isOutput=true]${SUBSCRIPTION_ID}"
        echo "##vso[task.setvariable variable=appClientId;isOutput=true]${APP_CLIENT_ID}"
        echo "##vso[task.setvariable variable=tenantId;isOutput=true]${TENANT_ID}"

        # Surface the input for optional fallback step
        echo "##vso[task.setvariable variable=inputIdOrName]${SC_NAME}"
      name: fetch
      env:
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

    # Only include this AzureCLI step when a service connection name is provided
    ${{ if ne(parameters.serviceConnectionForLogin, '') }}:
    - task: AzureCLI@2
      displayName: "Fallback: resolve App Registration appId (Graph)"
      # compile-time inclusion avoids auth validation when not provided
      inputs:
        azureSubscription: ${{ parameters.serviceConnectionForLogin }}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          IN="$(inputIdOrName)"
          if [[ -z "$IN" ]]; then
            echo "No input id/name; skipping."
            exit 0
          fi

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          if [[ "$IN" =~ ^[0-9a-fA-F-]{36}$ ]]; then
            echo "Treating '${IN}' as AAD App OBJECT ID. Resolving appId via 'az ad app show'..."
            APPID="$(az ad app show --id "$IN" --query appId -o tsv 2>/dev/null || true)"
            if [[ -n "$APPID" ]]; then
              echo "Resolved Application (client) ID: $APPID"
              echo "##vso[task.setvariable variable=appClientId;isOutput=true]$APPID"
            else
              echo "Could not resolve appId (insufficient rights or wrong tenant)."
            fi
          else
            echo "Input is not a GUID; skipping Graph fallback."
          fi
